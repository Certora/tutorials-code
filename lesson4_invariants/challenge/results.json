[{"description": "", "diff": "", "link": "https://prover.certora.com/output/98279/e41fd5db92854a899cba7dd20f2be524?anonymousKey=8a7dba0742fe3269020044941691792a46490e61", "name": "Original", "id": "Original", "rules": [{"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "DeleteExpressionMutation", "diff": "--- original\n+++ mutant\n@@ -51,7 +51,8 @@\n     uint256 _parentFrac,\n     uint256 _joiningFee\n   ) {\n-    require(_parentFrac > 0, \"Must be non-zero\");\n+    /// DeleteExpressionMutation(`require(_parentFrac > 0, \"Must be non-zero\")` |==> `assert(true)`) of: `require(_parentFrac > 0, \"Must be non-zero\");`\n+    assert(true);\n     parentFrac = _parentFrac;\n     joiningFee = _joiningFee;\n     \n", "link": "https://prover.certora.com/output/98279/d924be7f31ae492ba0743bb4e54e5033?anonymousKey=683f418d4242319a388aebf65e157b28b0068bb3", "name": "gambit_out/mutants/1/Pyramid.sol", "id": "1", "rules": [{"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "RequireMutation", "diff": "--- original\n+++ mutant\n@@ -51,7 +51,8 @@\n     uint256 _parentFrac,\n     uint256 _joiningFee\n   ) {\n-    require(_parentFrac > 0, \"Must be non-zero\");\n+    /// RequireMutation(`_parentFrac > 0` |==> `true`) of: `require(_parentFrac > 0, \"Must be non-zero\");`\n+    require(true, \"Must be non-zero\");\n     parentFrac = _parentFrac;\n     joiningFee = _joiningFee;\n     \n", "link": "https://prover.certora.com/output/98279/67e5f38342b54b089c569f4b05fba79f?anonymousKey=13ef78032dd7ebbbc802c52645c18e86d4c85b09", "name": "gambit_out/mutants/2/Pyramid.sol", "id": "2", "rules": [{"name": "membershipGhost", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "RequireMutation", "diff": "--- original\n+++ mutant\n@@ -51,7 +51,8 @@\n     uint256 _parentFrac,\n     uint256 _joiningFee\n   ) {\n-    require(_parentFrac > 0, \"Must be non-zero\");\n+    /// RequireMutation(`_parentFrac > 0` |==> `false`) of: `require(_parentFrac > 0, \"Must be non-zero\");`\n+    require(false, \"Must be non-zero\");\n     parentFrac = _parentFrac;\n     joiningFee = _joiningFee;\n     \n", "link": "https://prover.certora.com/output/98279/24db59644d594b62be9277f3f4e74bca?anonymousKey=ed9e520ae6b3161f199c58636507c99be4489498", "name": "gambit_out/mutants/3/Pyramid.sol", "id": "3", "rules": [{"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "SwapArgumentsOperatorMutation", "diff": "--- original\n+++ mutant\n@@ -51,7 +51,8 @@\n     uint256 _parentFrac,\n     uint256 _joiningFee\n   ) {\n-    require(_parentFrac > 0, \"Must be non-zero\");\n+    /// SwapArgumentsOperatorMutation(`_parentFrac > 0` |==> `0 > _parentFrac`) of: `require(_parentFrac > 0, \"Must be non-zero\");`\n+    require(0 > _parentFrac, \"Must be non-zero\");\n     parentFrac = _parentFrac;\n     joiningFee = _joiningFee;\n     \n", "link": "https://prover.certora.com/output/98279/24af14da7db148ef8bc5b6836051aae4?anonymousKey=8ecad72d1d6364e55762d12331a2b15ab82cda3e", "name": "gambit_out/mutants/4/Pyramid.sol", "id": "4", "rules": [{"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "FAIL"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "FAIL"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "FAIL"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "AssignmentMutation", "diff": "--- original\n+++ mutant\n@@ -52,7 +52,8 @@\n     uint256 _joiningFee\n   ) {\n     require(_parentFrac > 0, \"Must be non-zero\");\n-    parentFrac = _parentFrac;\n+    /// AssignmentMutation(`_parentFrac` |==> `0`) of: `parentFrac = _parentFrac;`\n+    parentFrac = 0;\n     joiningFee = _joiningFee;\n     \n     // Set the root\n", "link": "https://prover.certora.com/output/98279/e0605d844abc4e4e889078aff51aecfc?anonymousKey=26f338cfe756786cbb4234d333f7413f0ba6475b", "name": "gambit_out/mutants/5/Pyramid.sol", "id": "5", "rules": [{"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "AssignmentMutation", "diff": "--- original\n+++ mutant\n@@ -52,7 +52,8 @@\n     uint256 _joiningFee\n   ) {\n     require(_parentFrac > 0, \"Must be non-zero\");\n-    parentFrac = _parentFrac;\n+    /// AssignmentMutation(`_parentFrac` |==> `1`) of: `parentFrac = _parentFrac;`\n+    parentFrac = 1;\n     joiningFee = _joiningFee;\n     \n     // Set the root\n", "link": "https://prover.certora.com/output/98279/1fae4fbfd9bf4e8695e797e43dcb2c7c?anonymousKey=d0f9477be116429bf56c144d33c669723c3a3e6d", "name": "gambit_out/mutants/6/Pyramid.sol", "id": "6", "rules": [{"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "AssignmentMutation", "diff": "--- original\n+++ mutant\n@@ -53,7 +53,8 @@\n   ) {\n     require(_parentFrac > 0, \"Must be non-zero\");\n     parentFrac = _parentFrac;\n-    joiningFee = _joiningFee;\n+    /// AssignmentMutation(`_joiningFee` |==> `0`) of: `joiningFee = _joiningFee;`\n+    joiningFee = 0;\n     \n     // Set the root\n     require(msg.sender != address(0), \"Address zero cannot be a member\");\n", "link": "https://prover.certora.com/output/98279/da61c6f06f724359a8ab44d4282d8aec?anonymousKey=f8c3136d06908210a428908f106199f135bac0b3", "name": "gambit_out/mutants/7/Pyramid.sol", "id": "7", "rules": [{"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "AssignmentMutation", "diff": "--- original\n+++ mutant\n@@ -53,7 +53,8 @@\n   ) {\n     require(_parentFrac > 0, \"Must be non-zero\");\n     parentFrac = _parentFrac;\n-    joiningFee = _joiningFee;\n+    /// AssignmentMutation(`_joiningFee` |==> `1`) of: `joiningFee = _joiningFee;`\n+    joiningFee = 1;\n     \n     // Set the root\n     require(msg.sender != address(0), \"Address zero cannot be a member\");\n", "link": "https://prover.certora.com/output/98279/f860d3d2a70d4a30b2eaf93dc25a788a?anonymousKey=cc65d1b18d74837b867051489f97ab228f12bc59", "name": "gambit_out/mutants/8/Pyramid.sol", "id": "8", "rules": [{"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "DeleteExpressionMutation", "diff": "--- original\n+++ mutant\n@@ -56,7 +56,8 @@\n     joiningFee = _joiningFee;\n     \n     // Set the root\n-    require(msg.sender != address(0), \"Address zero cannot be a member\");\n+    /// DeleteExpressionMutation(`require(msg.sender != address(0), \"Address zero cannot be a member\")` |==> `assert(true)`) of: `require(msg.sender != address(0), \"Address zero cannot be a member\");`\n+    assert(true);\n     _root = msg.sender;\n     Member storage memberData = members[msg.sender];\n     memberData.exists = true;\n", "link": "https://prover.certora.com/output/98279/d6a5ca528a754cb5af3fe7c5ddfde999?anonymousKey=2dc81b8c41b66a37af8a147116c1674aaaf9d078", "name": "gambit_out/mutants/9/Pyramid.sol", "id": "9", "rules": [{"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "FAIL"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "FAIL"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "FAIL"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "RequireMutation", "diff": "--- original\n+++ mutant\n@@ -56,7 +56,8 @@\n     joiningFee = _joiningFee;\n     \n     // Set the root\n-    require(msg.sender != address(0), \"Address zero cannot be a member\");\n+    /// RequireMutation(`msg.sender != address(0)` |==> `true`) of: `require(msg.sender != address(0), \"Address zero cannot be a member\");`\n+    require(true, \"Address zero cannot be a member\");\n     _root = msg.sender;\n     Member storage memberData = members[msg.sender];\n     memberData.exists = true;\n", "link": "https://prover.certora.com/output/98279/7185798a63aa47b7b0b33a643f3bfa53?anonymousKey=18fe683b39a59ddb210d3f8d2bbbcbce3937fe6c", "name": "gambit_out/mutants/10/Pyramid.sol", "id": "10", "rules": [{"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "FAIL"}, {"name": "zeroIsNotAMember", "status": "FAIL"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "FAIL"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "RequireMutation", "diff": "--- original\n+++ mutant\n@@ -56,7 +56,8 @@\n     joiningFee = _joiningFee;\n     \n     // Set the root\n-    require(msg.sender != address(0), \"Address zero cannot be a member\");\n+    /// RequireMutation(`msg.sender != address(0)` |==> `false`) of: `require(msg.sender != address(0), \"Address zero cannot be a member\");`\n+    require(false, \"Address zero cannot be a member\");\n     _root = msg.sender;\n     Member storage memberData = members[msg.sender];\n     memberData.exists = true;\n", "link": "https://prover.certora.com/output/98279/9dfdd4174b7d4de4907c4e2c42f89703?anonymousKey=df913174cab6c12172c1188bbfc3100a11271799", "name": "gambit_out/mutants/11/Pyramid.sol", "id": "11", "rules": [{"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "DeleteExpressionMutation", "diff": "--- original\n+++ mutant\n@@ -57,7 +57,8 @@\n     \n     // Set the root\n     require(msg.sender != address(0), \"Address zero cannot be a member\");\n-    _root = msg.sender;\n+    /// DeleteExpressionMutation(`_root = msg.sender` |==> `assert(true)`) of: `_root = msg.sender;`\n+    assert(true);\n     Member storage memberData = members[msg.sender];\n     memberData.exists = true;\n   }\n", "link": "https://prover.certora.com/output/98279/f22dc955d99747108e57b05d1fb6e107?anonymousKey=a9e291f4b6228851b9090cebfdb5bba492229114", "name": "gambit_out/mutants/12/Pyramid.sol", "id": "12", "rules": [{"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "FAIL"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "FAIL"}, {"name": "onlyLegalRootChanges", "status": "FAIL"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "FAIL"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "DeleteExpressionMutation", "diff": "--- original\n+++ mutant\n@@ -59,7 +59,8 @@\n     require(msg.sender != address(0), \"Address zero cannot be a member\");\n     _root = msg.sender;\n     Member storage memberData = members[msg.sender];\n-    memberData.exists = true;\n+    /// DeleteExpressionMutation(`memberData.exists = true` |==> `assert(true)`) of: `memberData.exists = true;`\n+    assert(true);\n   }\n \n   modifier memebersOnly() {\n", "link": "https://prover.certora.com/output/98279/b38a94dccd8b475ab3f8f321159e087e?anonymousKey=614bbba40f1d7d6767f6b4eb368e066339ea7ca2", "name": "gambit_out/mutants/13/Pyramid.sol", "id": "13", "rules": [{"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "AssignmentMutation", "diff": "--- original\n+++ mutant\n@@ -59,7 +59,8 @@\n     require(msg.sender != address(0), \"Address zero cannot be a member\");\n     _root = msg.sender;\n     Member storage memberData = members[msg.sender];\n-    memberData.exists = true;\n+    /// AssignmentMutation(`true` |==> `false`) of: `memberData.exists = true;`\n+    memberData.exists = false;\n   }\n \n   modifier memebersOnly() {\n", "link": "https://prover.certora.com/output/98279/f267eeb790ad481aa7571d9cbb532e6d?anonymousKey=970300272bdd8ffee8b9727df4eb309546ea49b2", "name": "gambit_out/mutants/14/Pyramid.sol", "id": "14", "rules": [{"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "DeleteExpressionMutation", "diff": "--- original\n+++ mutant\n@@ -63,7 +63,8 @@\n   }\n \n   modifier memebersOnly() {\n-    require(contains(msg.sender), \"Not a member\");\n+    /// DeleteExpressionMutation(`require(contains(msg.sender), \"Not a member\")` |==> `assert(true)`) of: `require(contains(msg.sender), \"Not a member\");`\n+    assert(true);\n     _;\n   }\n \n", "link": "https://prover.certora.com/output/98279/a55afeda2ec54adf83dd163bcd44c76f?anonymousKey=34aaccfc518b57e38e023e8de72d0d6e2fac796b", "name": "gambit_out/mutants/15/Pyramid.sol", "id": "15", "rules": [{"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "RequireMutation", "diff": "--- original\n+++ mutant\n@@ -63,7 +63,8 @@\n   }\n \n   modifier memebersOnly() {\n-    require(contains(msg.sender), \"Not a member\");\n+    /// RequireMutation(`contains(msg.sender)` |==> `true`) of: `require(contains(msg.sender), \"Not a member\");`\n+    require(true, \"Not a member\");\n     _;\n   }\n \n", "link": "https://prover.certora.com/output/98279/e9ecf7566f8c463eac4193f753c86af7?anonymousKey=cdd4d643d9001d0db8d7f93c04dc87f9880e490a", "name": "gambit_out/mutants/16/Pyramid.sol", "id": "16", "rules": [{"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "RequireMutation", "diff": "--- original\n+++ mutant\n@@ -63,7 +63,8 @@\n   }\n \n   modifier memebersOnly() {\n-    require(contains(msg.sender), \"Not a member\");\n+    /// RequireMutation(`contains(msg.sender)` |==> `false`) of: `require(contains(msg.sender), \"Not a member\");`\n+    require(false, \"Not a member\");\n     _;\n   }\n \n", "link": "https://prover.certora.com/output/98279/449c9bf39b27434a8d58dd7ce1d05910?anonymousKey=f1e1fffa6003ff03a53c12c9e36cb3ee57637661", "name": "gambit_out/mutants/17/Pyramid.sol", "id": "17", "rules": [{"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}], "SANITY_FAIL": ["rootIsAMember", "rootReachesAll", "isChildOfIntegrity", "allChildrenHaveParents", "onlyLegalParentUpdates", "onlyLegalRootChanges", "membershipGhost", "rootHasNoParent", "onlyLegalChildUpdates", "rootMirrorIsRoot", "chiledOfParent", "zeroIsNotAMember", "parentFracIsPositive", "childIsNotParent"], "UNKNOWN": [], "TIMEOUT": []}, {"description": "DeleteExpressionMutation", "diff": "--- original\n+++ mutant\n@@ -94,7 +94,8 @@\n    */\n   function deposit() memebersOnly() external payable {\n     Member storage memberData = members[msg.sender];\n-    memberData.balance += msg.value;\n+    /// DeleteExpressionMutation(`memberData.balance += msg.value` |==> `assert(true)`) of: `memberData.balance += msg.value;`\n+    assert(true);\n   }\n \n   /**\n", "link": "https://prover.certora.com/output/98279/62df1d46d56a457f8bd90c25fa5022c1?anonymousKey=04710b02bab2a9c0cc404c8065d2f6fa7b20d073", "name": "gambit_out/mutants/18/Pyramid.sol", "id": "18", "rules": [{"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "AssignmentMutation", "diff": "--- original\n+++ mutant\n@@ -94,7 +94,8 @@\n    */\n   function deposit() memebersOnly() external payable {\n     Member storage memberData = members[msg.sender];\n-    memberData.balance += msg.value;\n+    /// AssignmentMutation(`msg.value` |==> `0`) of: `memberData.balance += msg.value;`\n+    memberData.balance += 0;\n   }\n \n   /**\n", "link": "https://prover.certora.com/output/98279/4789b9cac1334ad0b25b5b46fb2eedd5?anonymousKey=30993ccc69ea820eed688b4f634ee0d1434690b0", "name": "gambit_out/mutants/19/Pyramid.sol", "id": "19", "rules": [{"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "AssignmentMutation", "diff": "--- original\n+++ mutant\n@@ -94,7 +94,8 @@\n    */\n   function deposit() memebersOnly() external payable {\n     Member storage memberData = members[msg.sender];\n-    memberData.balance += msg.value;\n+    /// AssignmentMutation(`msg.value` |==> `1`) of: `memberData.balance += msg.value;`\n+    memberData.balance += 1;\n   }\n \n   /**\n", "link": "https://prover.certora.com/output/98279/4b63b2bb03b44b288a4f11e1640cb190?anonymousKey=3bcf61ae25a8a4b619335478b5fe33d2ff4eb7b4", "name": "gambit_out/mutants/20/Pyramid.sol", "id": "20", "rules": [{"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "DeleteExpressionMutation", "diff": "--- original\n+++ mutant\n@@ -101,7 +101,8 @@\n    * @return the child's parent\n    */\n   function getParent(address child) memebersOnly() public view returns (address) {\n-    require(contains(child), \"Not a member\");\n+    /// DeleteExpressionMutation(`require(contains(child), \"Not a member\")` |==> `assert(true)`) of: `require(contains(child), \"Not a member\");`\n+    assert(true);\n     return members[child].parent;\n   }\n \n", "link": "https://prover.certora.com/output/98279/cd4a82279a6242d3badba967fbca31c4?anonymousKey=4358f9ef8f20eb8f20579c6b1d77cc57c5998972", "name": "gambit_out/mutants/21/Pyramid.sol", "id": "21", "rules": [{"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "FAIL"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "FAIL"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "FAIL"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "RequireMutation", "diff": "--- original\n+++ mutant\n@@ -101,7 +101,8 @@\n    * @return the child's parent\n    */\n   function getParent(address child) memebersOnly() public view returns (address) {\n-    require(contains(child), \"Not a member\");\n+    /// RequireMutation(`contains(child)` |==> `true`) of: `require(contains(child), \"Not a member\");`\n+    require(true, \"Not a member\");\n     return members[child].parent;\n   }\n \n", "link": "https://prover.certora.com/output/98279/33c8fa2e8eac4c98a8e600d4fcacc829?anonymousKey=1a4918170af741a6cc90630dd622a67e648e72d9", "name": "gambit_out/mutants/22/Pyramid.sol", "id": "22", "rules": [{"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "FAIL"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "FAIL"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "FAIL"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "RequireMutation", "diff": "--- original\n+++ mutant\n@@ -101,7 +101,8 @@\n    * @return the child's parent\n    */\n   function getParent(address child) memebersOnly() public view returns (address) {\n-    require(contains(child), \"Not a member\");\n+    /// RequireMutation(`contains(child)` |==> `false`) of: `require(contains(child), \"Not a member\");`\n+    require(false, \"Not a member\");\n     return members[child].parent;\n   }\n \n", "link": "https://prover.certora.com/output/98279/b995f138339d46129f058cca743e9fd8?anonymousKey=ec682befe58951b301e7c7231a9216d5d1af2391", "name": "gambit_out/mutants/23/Pyramid.sol", "id": "23", "rules": [{"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}], "SANITY_FAIL": ["rootHasNoParent", "allChildrenHaveParents", "childIsNotParent", "chiledOfParent"], "UNKNOWN": [], "TIMEOUT": []}, {"description": "DeleteExpressionMutation", "diff": "--- original\n+++ mutant\n@@ -113,7 +113,8 @@\n     address parent,\n     bool isRight\n   ) memebersOnly() public view returns (address) {\n-    require(contains(parent), \"Not a member\");\n+    /// DeleteExpressionMutation(`require(contains(parent), \"Not a member\")` |==> `assert(true)`) of: `require(contains(parent), \"Not a member\");`\n+    assert(true);\n     Member storage memberData = members[parent];\n     if (isRight) {\n       return memberData.rightChild;\n", "link": "https://prover.certora.com/output/98279/f7b41e8f4ab345f0afa6bb0bec1f860b?anonymousKey=b94ca288ca495ae4c5ffa517c319a1aeb5b5eea8", "name": "gambit_out/mutants/24/Pyramid.sol", "id": "24", "rules": [{"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "FAIL"}, {"name": "rootHasNoParent", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "RequireMutation", "diff": "--- original\n+++ mutant\n@@ -113,7 +113,8 @@\n     address parent,\n     bool isRight\n   ) memebersOnly() public view returns (address) {\n-    require(contains(parent), \"Not a member\");\n+    /// RequireMutation(`contains(parent)` |==> `true`) of: `require(contains(parent), \"Not a member\");`\n+    require(true, \"Not a member\");\n     Member storage memberData = members[parent];\n     if (isRight) {\n       return memberData.rightChild;\n", "link": "https://prover.certora.com/output/98279/c63b9109165c446ba3c0720b563d73af?anonymousKey=2a334c3d080d7e94d2c05bfd9dce85c26ae949c7", "name": "gambit_out/mutants/25/Pyramid.sol", "id": "25", "rules": [{"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "FAIL"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "RequireMutation", "diff": "--- original\n+++ mutant\n@@ -113,7 +113,8 @@\n     address parent,\n     bool isRight\n   ) memebersOnly() public view returns (address) {\n-    require(contains(parent), \"Not a member\");\n+    /// RequireMutation(`contains(parent)` |==> `false`) of: `require(contains(parent), \"Not a member\");`\n+    require(false, \"Not a member\");\n     Member storage memberData = members[parent];\n     if (isRight) {\n       return memberData.rightChild;\n", "link": "https://prover.certora.com/output/98279/763fb81c7b094866898018ca971d37c2?anonymousKey=56530cd60d677ac86bfae6721a489281600990d0", "name": "gambit_out/mutants/26/Pyramid.sol", "id": "26", "rules": [{"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}], "SANITY_FAIL": ["allChildrenHaveParents", "rootIsAMember", "isChildOfIntegrity", "parentFracIsPositive", "onlyLegalRootChanges", "chiledOfParent", "rootReachesAll", "zeroIsNotAMember", "onlyLegalParentUpdates", "membershipGhost", "onlyLegalChildUpdates", "rootHasNoParent", "rootMirrorIsRoot", "childIsNotParent"], "UNKNOWN": [], "TIMEOUT": []}, {"description": "IfStatementMutation", "diff": "--- original\n+++ mutant\n@@ -115,7 +115,8 @@\n   ) memebersOnly() public view returns (address) {\n     require(contains(parent), \"Not a member\");\n     Member storage memberData = members[parent];\n-    if (isRight) {\n+    /// IfStatementMutation(`isRight` |==> `true`) of: `if (isRight) {`\n+    if (true) {\n       return memberData.rightChild;\n     } else {\n       return memberData.leftChild;\n", "link": "https://prover.certora.com/output/98279/7338cb40f4ec4222be0f7b1407b48d06?anonymousKey=15ca6ee3f4d47156c77d27d8f1382215eafd3271", "name": "gambit_out/mutants/27/Pyramid.sol", "id": "27", "rules": [{"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "FAIL"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "FAIL"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "IfStatementMutation", "diff": "--- original\n+++ mutant\n@@ -115,7 +115,8 @@\n   ) memebersOnly() public view returns (address) {\n     require(contains(parent), \"Not a member\");\n     Member storage memberData = members[parent];\n-    if (isRight) {\n+    /// IfStatementMutation(`isRight` |==> `false`) of: `if (isRight) {`\n+    if (false) {\n       return memberData.rightChild;\n     } else {\n       return memberData.leftChild;\n", "link": "https://prover.certora.com/output/98279/497c948dc8174d4fb4d8bf34d0752220?anonymousKey=13d92f8e4c473a6532dc7b657ae61da282021543", "name": "gambit_out/mutants/28/Pyramid.sol", "id": "28", "rules": [{"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "FAIL"}, {"name": "onlyLegalChildUpdates", "status": "FAIL"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "BinaryOpMutation", "diff": "--- original\n+++ mutant\n@@ -143,7 +143,8 @@\n     Member storage memberData = members[msg.sender];\n \n     // If there is no parent than the parent part is zero\n-    uint256 parentPart = contains(memberData.parent) ? amount / parentFrac : 0;\n+    /// BinaryOpMutation(`/` |==> `+`) of: `uint256 parentPart = contains(memberData.parent) ? amount / parentFrac : 0;`\n+    uint256 parentPart = contains(memberData.parent) ? amount+parentFrac : 0;\n     uint256 totalRemove = amount + parentPart;\n     require(memberData.balance >= totalRemove, \"Insufficient funds\");\n \n", "link": "https://prover.certora.com/output/98279/16af4b24cf9b4576b588661f69ae7741?anonymousKey=330771e790a21c4691170e6bc83c7bfc59002294", "name": "gambit_out/mutants/29/Pyramid.sol", "id": "29", "rules": [{"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "BinaryOpMutation", "diff": "--- original\n+++ mutant\n@@ -143,7 +143,8 @@\n     Member storage memberData = members[msg.sender];\n \n     // If there is no parent than the parent part is zero\n-    uint256 parentPart = contains(memberData.parent) ? amount / parentFrac : 0;\n+    /// BinaryOpMutation(`/` |==> `-`) of: `uint256 parentPart = contains(memberData.parent) ? amount / parentFrac : 0;`\n+    uint256 parentPart = contains(memberData.parent) ? amount-parentFrac : 0;\n     uint256 totalRemove = amount + parentPart;\n     require(memberData.balance >= totalRemove, \"Insufficient funds\");\n \n", "link": "https://prover.certora.com/output/98279/e730691127b940818534ef1178140c87?anonymousKey=2b43a1464e45d7e7458b3bf498c00534f7b1b73e", "name": "gambit_out/mutants/30/Pyramid.sol", "id": "30", "rules": [{"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "BinaryOpMutation", "diff": "--- original\n+++ mutant\n@@ -143,7 +143,8 @@\n     Member storage memberData = members[msg.sender];\n \n     // If there is no parent than the parent part is zero\n-    uint256 parentPart = contains(memberData.parent) ? amount / parentFrac : 0;\n+    /// BinaryOpMutation(`/` |==> `*`) of: `uint256 parentPart = contains(memberData.parent) ? amount / parentFrac : 0;`\n+    uint256 parentPart = contains(memberData.parent) ? amount*parentFrac : 0;\n     uint256 totalRemove = amount + parentPart;\n     require(memberData.balance >= totalRemove, \"Insufficient funds\");\n \n", "link": "https://prover.certora.com/output/98279/0be2a6260db345b4baf43cfd9d5a01b4?anonymousKey=952b9895112c0ebc975c8e10e75e29bc982017ec", "name": "gambit_out/mutants/31/Pyramid.sol", "id": "31", "rules": [{"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "BinaryOpMutation", "diff": "--- original\n+++ mutant\n@@ -143,7 +143,8 @@\n     Member storage memberData = members[msg.sender];\n \n     // If there is no parent than the parent part is zero\n-    uint256 parentPart = contains(memberData.parent) ? amount / parentFrac : 0;\n+    /// BinaryOpMutation(`/` |==> `%`) of: `uint256 parentPart = contains(memberData.parent) ? amount / parentFrac : 0;`\n+    uint256 parentPart = contains(memberData.parent) ? amount%parentFrac : 0;\n     uint256 totalRemove = amount + parentPart;\n     require(memberData.balance >= totalRemove, \"Insufficient funds\");\n \n", "link": "https://prover.certora.com/output/98279/67ec11fee72c4eb38b3aa7675c4d898a?anonymousKey=1974833089605116539081d3efcea39e63ead334", "name": "gambit_out/mutants/32/Pyramid.sol", "id": "32", "rules": [{"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "BinaryOpMutation", "diff": "--- original\n+++ mutant\n@@ -143,7 +143,8 @@\n     Member storage memberData = members[msg.sender];\n \n     // If there is no parent than the parent part is zero\n-    uint256 parentPart = contains(memberData.parent) ? amount / parentFrac : 0;\n+    /// BinaryOpMutation(`/` |==> `**`) of: `uint256 parentPart = contains(memberData.parent) ? amount / parentFrac : 0;`\n+    uint256 parentPart = contains(memberData.parent) ? amount**parentFrac : 0;\n     uint256 totalRemove = amount + parentPart;\n     require(memberData.balance >= totalRemove, \"Insufficient funds\");\n \n", "link": "https://prover.certora.com/output/98279/54ca0bda1702472aa03101f5c7e2edff?anonymousKey=b4581ded722f3c2460be7fa8a28a8af498b0b0ae", "name": "gambit_out/mutants/33/Pyramid.sol", "id": "33", "rules": [{"name": "onlyLegalRootChanges", "status": "FAIL"}, {"name": "rootIsAMember", "status": "FAIL"}, {"name": "rootHasNoParent", "status": "FAIL"}, {"name": "zeroIsNotAMember", "status": "FAIL"}, {"name": "chiledOfParent", "status": "FAIL"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "FAIL"}, {"name": "isChildOfIntegrity", "status": "FAIL"}, {"name": "onlyLegalChildUpdates", "status": "FAIL"}, {"name": "rootReachesAll", "status": "FAIL"}, {"name": "membershipGhost", "status": "FAIL"}, {"name": "rootMirrorIsRoot", "status": "FAIL"}, {"name": "allChildrenHaveParents", "status": "FAIL"}, {"name": "parentFracIsPositive", "status": "FAIL"}, {"name": "onlyLegalParentUpdates", "status": "FAIL"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "SwapArgumentsOperatorMutation", "diff": "--- original\n+++ mutant\n@@ -143,7 +143,8 @@\n     Member storage memberData = members[msg.sender];\n \n     // If there is no parent than the parent part is zero\n-    uint256 parentPart = contains(memberData.parent) ? amount / parentFrac : 0;\n+    /// SwapArgumentsOperatorMutation(`amount / parentFrac` |==> `parentFrac / amount`) of: `uint256 parentPart = contains(memberData.parent) ? amount / parentFrac : 0;`\n+    uint256 parentPart = contains(memberData.parent) ? parentFrac / amount : 0;\n     uint256 totalRemove = amount + parentPart;\n     require(memberData.balance >= totalRemove, \"Insufficient funds\");\n \n", "link": "https://prover.certora.com/output/98279/d737678546cc4e1ca9ef899be70df953?anonymousKey=84c41be600f6411f010942cc892639c3a6d74a1a", "name": "gambit_out/mutants/34/Pyramid.sol", "id": "34", "rules": [{"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "BinaryOpMutation", "diff": "--- original\n+++ mutant\n@@ -144,7 +144,8 @@\n \n     // If there is no parent than the parent part is zero\n     uint256 parentPart = contains(memberData.parent) ? amount / parentFrac : 0;\n-    uint256 totalRemove = amount + parentPart;\n+    /// BinaryOpMutation(`+` |==> `-`) of: `uint256 totalRemove = amount + parentPart;`\n+    uint256 totalRemove = amount-parentPart;\n     require(memberData.balance >= totalRemove, \"Insufficient funds\");\n \n     memberData.balance -= totalRemove;\n", "link": "https://prover.certora.com/output/98279/f9e25c0da1f84f048119eebeda691e5e?anonymousKey=464ac13050b299380c013d228e75a253777153fd", "name": "gambit_out/mutants/35/Pyramid.sol", "id": "35", "rules": [{"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "BinaryOpMutation", "diff": "--- original\n+++ mutant\n@@ -144,7 +144,8 @@\n \n     // If there is no parent than the parent part is zero\n     uint256 parentPart = contains(memberData.parent) ? amount / parentFrac : 0;\n-    uint256 totalRemove = amount + parentPart;\n+    /// BinaryOpMutation(`+` |==> `*`) of: `uint256 totalRemove = amount + parentPart;`\n+    uint256 totalRemove = amount*parentPart;\n     require(memberData.balance >= totalRemove, \"Insufficient funds\");\n \n     memberData.balance -= totalRemove;\n", "link": "https://prover.certora.com/output/98279/a2c46500ccbd4123a81b0bfc283651ac?anonymousKey=c7fac7d8596ae6b94e1b82aeb71a72a1b8f9648b", "name": "gambit_out/mutants/36/Pyramid.sol", "id": "36", "rules": [{"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "BinaryOpMutation", "diff": "--- original\n+++ mutant\n@@ -144,7 +144,8 @@\n \n     // If there is no parent than the parent part is zero\n     uint256 parentPart = contains(memberData.parent) ? amount / parentFrac : 0;\n-    uint256 totalRemove = amount + parentPart;\n+    /// BinaryOpMutation(`+` |==> `/`) of: `uint256 totalRemove = amount + parentPart;`\n+    uint256 totalRemove = amount/parentPart;\n     require(memberData.balance >= totalRemove, \"Insufficient funds\");\n \n     memberData.balance -= totalRemove;\n", "link": "https://prover.certora.com/output/98279/7425549e474d4227a5d80968cc0efd15?anonymousKey=cdad037ca8462e469f8f7667ef63f3adbd18c5bd", "name": "gambit_out/mutants/37/Pyramid.sol", "id": "37", "rules": [{"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "BinaryOpMutation", "diff": "--- original\n+++ mutant\n@@ -144,7 +144,8 @@\n \n     // If there is no parent than the parent part is zero\n     uint256 parentPart = contains(memberData.parent) ? amount / parentFrac : 0;\n-    uint256 totalRemove = amount + parentPart;\n+    /// BinaryOpMutation(`+` |==> `%`) of: `uint256 totalRemove = amount + parentPart;`\n+    uint256 totalRemove = amount%parentPart;\n     require(memberData.balance >= totalRemove, \"Insufficient funds\");\n \n     memberData.balance -= totalRemove;\n", "link": "https://prover.certora.com/output/98279/d7dc205308604d9d9acabc08ca8a0eb0?anonymousKey=19aa03be67ae8309c16d521361692748af3408cd", "name": "gambit_out/mutants/38/Pyramid.sol", "id": "38", "rules": [{"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "BinaryOpMutation", "diff": "--- original\n+++ mutant\n@@ -144,7 +144,8 @@\n \n     // If there is no parent than the parent part is zero\n     uint256 parentPart = contains(memberData.parent) ? amount / parentFrac : 0;\n-    uint256 totalRemove = amount + parentPart;\n+    /// BinaryOpMutation(`+` |==> `**`) of: `uint256 totalRemove = amount + parentPart;`\n+    uint256 totalRemove = amount**parentPart;\n     require(memberData.balance >= totalRemove, \"Insufficient funds\");\n \n     memberData.balance -= totalRemove;\n", "link": "https://prover.certora.com/output/98279/fd8b8835df29481c9d24c778482a0166?anonymousKey=c2b4bd71d4858bdeef3706c47d31faef432a03bb", "name": "gambit_out/mutants/39/Pyramid.sol", "id": "39", "rules": [{"name": "zeroIsNotAMember", "status": "FAIL"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "FAIL"}, {"name": "rootHasNoParent", "status": "FAIL"}, {"name": "isChildOfIntegrity", "status": "FAIL"}, {"name": "rootReachesAll", "status": "FAIL"}, {"name": "onlyLegalRootChanges", "status": "FAIL"}, {"name": "onlyLegalParentUpdates", "status": "FAIL"}, {"name": "rootIsAMember", "status": "FAIL"}, {"name": "childIsNotParent", "status": "FAIL"}, {"name": "membershipGhost", "status": "FAIL"}, {"name": "onlyLegalChildUpdates", "status": "FAIL"}, {"name": "parentFracIsPositive", "status": "FAIL"}, {"name": "allChildrenHaveParents", "status": "FAIL"}, {"name": "rootMirrorIsRoot", "status": "FAIL"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "DeleteExpressionMutation", "diff": "--- original\n+++ mutant\n@@ -145,7 +145,8 @@\n     // If there is no parent than the parent part is zero\n     uint256 parentPart = contains(memberData.parent) ? amount / parentFrac : 0;\n     uint256 totalRemove = amount + parentPart;\n-    require(memberData.balance >= totalRemove, \"Insufficient funds\");\n+    /// DeleteExpressionMutation(`require(memberData.balance >= totalRemove, \"Insufficient funds\")` |==> `assert(true)`) of: `require(memberData.balance >= totalRemove, \"Insufficient funds\");`\n+    assert(true);\n \n     memberData.balance -= totalRemove;\n     \n", "link": "https://prover.certora.com/output/98279/3d61c73ccacc4a4cbad22608d6775068?anonymousKey=b5b5dcf39cbb01c86cd83c1ee9009661940d5275", "name": "gambit_out/mutants/40/Pyramid.sol", "id": "40", "rules": [{"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "RequireMutation", "diff": "--- original\n+++ mutant\n@@ -145,7 +145,8 @@\n     // If there is no parent than the parent part is zero\n     uint256 parentPart = contains(memberData.parent) ? amount / parentFrac : 0;\n     uint256 totalRemove = amount + parentPart;\n-    require(memberData.balance >= totalRemove, \"Insufficient funds\");\n+    /// RequireMutation(`memberData.balance >= totalRemove` |==> `true`) of: `require(memberData.balance >= totalRemove, \"Insufficient funds\");`\n+    require(true, \"Insufficient funds\");\n \n     memberData.balance -= totalRemove;\n     \n", "link": "https://prover.certora.com/output/98279/1446fe5969b24e6aa1fde02d2c29ebec?anonymousKey=aad3cfc5d33845fb65e0c0d1d853eeb97ab1ce17", "name": "gambit_out/mutants/41/Pyramid.sol", "id": "41", "rules": [{"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "RequireMutation", "diff": "--- original\n+++ mutant\n@@ -145,7 +145,8 @@\n     // If there is no parent than the parent part is zero\n     uint256 parentPart = contains(memberData.parent) ? amount / parentFrac : 0;\n     uint256 totalRemove = amount + parentPart;\n-    require(memberData.balance >= totalRemove, \"Insufficient funds\");\n+    /// RequireMutation(`memberData.balance >= totalRemove` |==> `false`) of: `require(memberData.balance >= totalRemove, \"Insufficient funds\");`\n+    require(false, \"Insufficient funds\");\n \n     memberData.balance -= totalRemove;\n     \n", "link": "https://prover.certora.com/output/98279/d22dda2d92f540858c0fdc47c88a5143?anonymousKey=6680e9118566840c42103a966f41f7c825b8bcca", "name": "gambit_out/mutants/42/Pyramid.sol", "id": "42", "rules": [{"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}], "SANITY_FAIL": ["onlyLegalRootChanges", "rootMirrorIsRoot", "isChildOfIntegrity", "chiledOfParent", "membershipGhost", "rootReachesAll", "childIsNotParent", "rootIsAMember", "zeroIsNotAMember", "parentFracIsPositive", "allChildrenHaveParents", "rootHasNoParent", "onlyLegalChildUpdates", "onlyLegalParentUpdates"], "UNKNOWN": [], "TIMEOUT": []}, {"description": "SwapArgumentsOperatorMutation", "diff": "--- original\n+++ mutant\n@@ -145,7 +145,8 @@\n     // If there is no parent than the parent part is zero\n     uint256 parentPart = contains(memberData.parent) ? amount / parentFrac : 0;\n     uint256 totalRemove = amount + parentPart;\n-    require(memberData.balance >= totalRemove, \"Insufficient funds\");\n+    /// SwapArgumentsOperatorMutation(`memberData.balance >= totalRemove` |==> `totalRemove >= memberData.balance`) of: `require(memberData.balance >= totalRemove, \"Insufficient funds\");`\n+    require(totalRemove >= memberData.balance, \"Insufficient funds\");\n \n     memberData.balance -= totalRemove;\n     \n", "link": "https://prover.certora.com/output/98279/0b4e61efb5094e52bf8321fe46e77422?anonymousKey=a6a5fb6365bef584a097351e2ee1fef60e6702da", "name": "gambit_out/mutants/43/Pyramid.sol", "id": "43", "rules": [{"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "DeleteExpressionMutation", "diff": "--- original\n+++ mutant\n@@ -147,7 +147,8 @@\n     uint256 totalRemove = amount + parentPart;\n     require(memberData.balance >= totalRemove, \"Insufficient funds\");\n \n-    memberData.balance -= totalRemove;\n+    /// DeleteExpressionMutation(`memberData.balance -= totalRemove` |==> `assert(true)`) of: `memberData.balance -= totalRemove;`\n+    assert(true);\n     \n     // Send parent part\n     members[memberData.parent].balance += parentPart;\n", "link": "https://prover.certora.com/output/98279/89d8a38a7c624ad092c66f78d20b3a0f?anonymousKey=2fcf7afd3eff4b273be5c047c2b767fa4ed458f0", "name": "gambit_out/mutants/44/Pyramid.sol", "id": "44", "rules": [{"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "AssignmentMutation", "diff": "--- original\n+++ mutant\n@@ -147,7 +147,8 @@\n     uint256 totalRemove = amount + parentPart;\n     require(memberData.balance >= totalRemove, \"Insufficient funds\");\n \n-    memberData.balance -= totalRemove;\n+    /// AssignmentMutation(`totalRemove` |==> `0`) of: `memberData.balance -= totalRemove;`\n+    memberData.balance -= 0;\n     \n     // Send parent part\n     members[memberData.parent].balance += parentPart;\n", "link": "https://prover.certora.com/output/98279/1d900856bf2d41488cbe13276f099afe?anonymousKey=493206179a65ea72ed7b951eb6450fd7efb13966", "name": "gambit_out/mutants/45/Pyramid.sol", "id": "45", "rules": [{"name": "membershipGhost", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "AssignmentMutation", "diff": "--- original\n+++ mutant\n@@ -147,7 +147,8 @@\n     uint256 totalRemove = amount + parentPart;\n     require(memberData.balance >= totalRemove, \"Insufficient funds\");\n \n-    memberData.balance -= totalRemove;\n+    /// AssignmentMutation(`totalRemove` |==> `1`) of: `memberData.balance -= totalRemove;`\n+    memberData.balance -= 1;\n     \n     // Send parent part\n     members[memberData.parent].balance += parentPart;\n", "link": "https://prover.certora.com/output/98279/4dcc527acec14ad5b9998d8d098a336d?anonymousKey=bb43099ed365b2ecf7140ceb9fa51e8d46411346", "name": "gambit_out/mutants/46/Pyramid.sol", "id": "46", "rules": [{"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "DeleteExpressionMutation", "diff": "--- original\n+++ mutant\n@@ -150,7 +150,8 @@\n     memberData.balance -= totalRemove;\n     \n     // Send parent part\n-    members[memberData.parent].balance += parentPart;\n+    /// DeleteExpressionMutation(`members[memberData.parent].balance += parentPart` |==> `assert(true)`) of: `members[memberData.parent].balance += parentPart;`\n+    assert(true);\n     \n     // Send member's payment\n     (bool success, ) = msg.sender.call{value: amount}(\"\");\n", "link": "https://prover.certora.com/output/98279/87f20c31733f44939aa9f4385cf650e6?anonymousKey=aa8e2b35eca69b419e32896753dadb7977dc25c5", "name": "gambit_out/mutants/47/Pyramid.sol", "id": "47", "rules": [{"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "AssignmentMutation", "diff": "--- original\n+++ mutant\n@@ -150,7 +150,8 @@\n     memberData.balance -= totalRemove;\n     \n     // Send parent part\n-    members[memberData.parent].balance += parentPart;\n+    /// AssignmentMutation(`parentPart` |==> `0`) of: `members[memberData.parent].balance += parentPart;`\n+    members[memberData.parent].balance += 0;\n     \n     // Send member's payment\n     (bool success, ) = msg.sender.call{value: amount}(\"\");\n", "link": "https://prover.certora.com/output/98279/18fb8995c96940b29ab2a20927595c4b?anonymousKey=318c22a0797b59eb4ed0d9a61218221c50d536b6", "name": "gambit_out/mutants/48/Pyramid.sol", "id": "48", "rules": [{"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "AssignmentMutation", "diff": "--- original\n+++ mutant\n@@ -150,7 +150,8 @@\n     memberData.balance -= totalRemove;\n     \n     // Send parent part\n-    members[memberData.parent].balance += parentPart;\n+    /// AssignmentMutation(`parentPart` |==> `1`) of: `members[memberData.parent].balance += parentPart;`\n+    members[memberData.parent].balance += 1;\n     \n     // Send member's payment\n     (bool success, ) = msg.sender.call{value: amount}(\"\");\n", "link": "https://prover.certora.com/output/98279/de0369d19ed244c3af7c4011aa743df9?anonymousKey=f4cb4d3ad80159dacf5cce58bf50ccb6f9c7b50e", "name": "gambit_out/mutants/49/Pyramid.sol", "id": "49", "rules": [{"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "DeleteExpressionMutation", "diff": "--- original\n+++ mutant\n@@ -154,7 +154,8 @@\n     \n     // Send member's payment\n     (bool success, ) = msg.sender.call{value: amount}(\"\");\n-    require(success);\n+    /// DeleteExpressionMutation(`require(success)` |==> `assert(true)`) of: `require(success);`\n+    assert(true);\n   }\n \n   /**\n", "link": "https://prover.certora.com/output/98279/f1f495d6bd4e48a7b6ed45b97e6718e2?anonymousKey=a53ac9bc7584bac847509016f49911fa3afd6173", "name": "gambit_out/mutants/50/Pyramid.sol", "id": "50", "rules": [{"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "RequireMutation", "diff": "--- original\n+++ mutant\n@@ -154,7 +154,8 @@\n     \n     // Send member's payment\n     (bool success, ) = msg.sender.call{value: amount}(\"\");\n-    require(success);\n+    /// RequireMutation(`success` |==> `true`) of: `require(success);`\n+    require(true);\n   }\n \n   /**\n", "link": "https://prover.certora.com/output/98279/36deb045bcf9488492baf0032d7405f9?anonymousKey=fe38c307c05b05129a4f8cc537328a6286e85898", "name": "gambit_out/mutants/51/Pyramid.sol", "id": "51", "rules": [{"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "RequireMutation", "diff": "--- original\n+++ mutant\n@@ -154,7 +154,8 @@\n     \n     // Send member's payment\n     (bool success, ) = msg.sender.call{value: amount}(\"\");\n-    require(success);\n+    /// RequireMutation(`success` |==> `false`) of: `require(success);`\n+    require(false);\n   }\n \n   /**\n", "link": "https://prover.certora.com/output/98279/41ae69785a8b4bc1a6b03eeaad7d17de?anonymousKey=481ed1558a5c54c83c336698ffa1c48f3ed917d8", "name": "gambit_out/mutants/52/Pyramid.sol", "id": "52", "rules": [{"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}], "SANITY_FAIL": ["childIsNotParent", "rootMirrorIsRoot", "rootIsAMember", "parentFracIsPositive", "rootHasNoParent", "rootReachesAll", "isChildOfIntegrity", "onlyLegalChildUpdates", "chiledOfParent", "onlyLegalRootChanges", "membershipGhost", "zeroIsNotAMember", "onlyLegalParentUpdates", "allChildrenHaveParents"], "UNKNOWN": [], "TIMEOUT": []}, {"description": "DeleteExpressionMutation", "diff": "--- original\n+++ mutant\n@@ -166,7 +166,8 @@\n    * scheme\n    */\n   function join(address child, bool isRight) memebersOnly() public {\n-    require(!hasChild(msg.sender, isRight), \"Child already exists\");\n+    /// DeleteExpressionMutation(`require(!hasChild(msg.sender, isRight), \"Child already exists\")` |==> `assert(true)`) of: `require(!hasChild(msg.sender, isRight), \"Child already exists\");`\n+    assert(true);\n     require(!contains(child), \"Child already a member\");\n     require(child != address(0), \"Address zero cannot be a member\");\n \n", "link": "https://prover.certora.com/output/98279/4339629840a64086b0e88d878063e7f1?anonymousKey=27847e350597a181d587ad9786b275aad1df96fd", "name": "gambit_out/mutants/53/Pyramid.sol", "id": "53", "rules": [{"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "FAIL"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "FAIL"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "FAIL"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "RequireMutation", "diff": "--- original\n+++ mutant\n@@ -166,7 +166,8 @@\n    * scheme\n    */\n   function join(address child, bool isRight) memebersOnly() public {\n-    require(!hasChild(msg.sender, isRight), \"Child already exists\");\n+    /// RequireMutation(`!hasChild(msg.sender, isRight)` |==> `true`) of: `require(!hasChild(msg.sender, isRight), \"Child already exists\");`\n+    require(true, \"Child already exists\");\n     require(!contains(child), \"Child already a member\");\n     require(child != address(0), \"Address zero cannot be a member\");\n \n", "link": "https://prover.certora.com/output/98279/d9c6bfbe553c465da108396a5f9e3a96?anonymousKey=4fe52e2ed922e5b49168f3ebddfbd21e72fb1a6a", "name": "gambit_out/mutants/54/Pyramid.sol", "id": "54", "rules": [{"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "FAIL"}, {"name": "onlyLegalChildUpdates", "status": "FAIL"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "FAIL"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "RequireMutation", "diff": "--- original\n+++ mutant\n@@ -166,7 +166,8 @@\n    * scheme\n    */\n   function join(address child, bool isRight) memebersOnly() public {\n-    require(!hasChild(msg.sender, isRight), \"Child already exists\");\n+    /// RequireMutation(`!hasChild(msg.sender, isRight)` |==> `false`) of: `require(!hasChild(msg.sender, isRight), \"Child already exists\");`\n+    require(false, \"Child already exists\");\n     require(!contains(child), \"Child already a member\");\n     require(child != address(0), \"Address zero cannot be a member\");\n \n", "link": "https://prover.certora.com/output/98279/877ee1d214d94ae3858005607a3427f0?anonymousKey=a078a9818c76e8895478bc91f4c50c8030a23bac", "name": "gambit_out/mutants/55/Pyramid.sol", "id": "55", "rules": [{"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}], "SANITY_FAIL": ["membershipGhost", "isChildOfIntegrity", "chiledOfParent", "onlyLegalRootChanges", "onlyLegalParentUpdates", "zeroIsNotAMember", "rootIsAMember", "rootHasNoParent", "rootReachesAll", "onlyLegalChildUpdates", "parentFracIsPositive", "rootMirrorIsRoot", "allChildrenHaveParents", "childIsNotParent"], "UNKNOWN": [], "TIMEOUT": []}, {"description": "DeleteExpressionMutation", "diff": "--- original\n+++ mutant\n@@ -167,7 +167,8 @@\n    */\n   function join(address child, bool isRight) memebersOnly() public {\n     require(!hasChild(msg.sender, isRight), \"Child already exists\");\n-    require(!contains(child), \"Child already a member\");\n+    /// DeleteExpressionMutation(`require(!contains(child), \"Child already a member\")` |==> `assert(true)`) of: `require(!contains(child), \"Child already a member\");`\n+    assert(true);\n     require(child != address(0), \"Address zero cannot be a member\");\n \n     Member storage memberData = members[msg.sender];\n", "link": "https://prover.certora.com/output/98279/ed7e92d422b04359944f8271de711d30?anonymousKey=3bab63f090f9740f03ecc5da1fb52dc703109b85", "name": "gambit_out/mutants/56/Pyramid.sol", "id": "56", "rules": [{"name": "membershipGhost", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "FAIL"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "RequireMutation", "diff": "--- original\n+++ mutant\n@@ -167,7 +167,8 @@\n    */\n   function join(address child, bool isRight) memebersOnly() public {\n     require(!hasChild(msg.sender, isRight), \"Child already exists\");\n-    require(!contains(child), \"Child already a member\");\n+    /// RequireMutation(`!contains(child)` |==> `true`) of: `require(!contains(child), \"Child already a member\");`\n+    require(true, \"Child already a member\");\n     require(child != address(0), \"Address zero cannot be a member\");\n \n     Member storage memberData = members[msg.sender];\n", "link": "https://prover.certora.com/output/98279/5d2957df646e4a168a76b0ad5ec683e2?anonymousKey=28c4e255e3800bf85fd19a5ce96a052d0d7a2b92", "name": "gambit_out/mutants/57/Pyramid.sol", "id": "57", "rules": [{"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "FAIL"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "RequireMutation", "diff": "--- original\n+++ mutant\n@@ -167,7 +167,8 @@\n    */\n   function join(address child, bool isRight) memebersOnly() public {\n     require(!hasChild(msg.sender, isRight), \"Child already exists\");\n-    require(!contains(child), \"Child already a member\");\n+    /// RequireMutation(`!contains(child)` |==> `false`) of: `require(!contains(child), \"Child already a member\");`\n+    require(false, \"Child already a member\");\n     require(child != address(0), \"Address zero cannot be a member\");\n \n     Member storage memberData = members[msg.sender];\n", "link": "https://prover.certora.com/output/98279/8b32e584e4224668911a7c755e2fdfaf?anonymousKey=7e2bae367729192052bbfd730a07c8055885f55f", "name": "gambit_out/mutants/58/Pyramid.sol", "id": "58", "rules": [{"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}], "SANITY_FAIL": ["allChildrenHaveParents", "rootMirrorIsRoot", "childIsNotParent", "onlyLegalParentUpdates", "onlyLegalRootChanges", "onlyLegalChildUpdates", "rootIsAMember", "parentFracIsPositive", "rootHasNoParent", "rootReachesAll", "isChildOfIntegrity", "membershipGhost", "zeroIsNotAMember", "chiledOfParent"], "UNKNOWN": [], "TIMEOUT": []}, {"description": "DeleteExpressionMutation", "diff": "--- original\n+++ mutant\n@@ -168,7 +168,8 @@\n   function join(address child, bool isRight) memebersOnly() public {\n     require(!hasChild(msg.sender, isRight), \"Child already exists\");\n     require(!contains(child), \"Child already a member\");\n-    require(child != address(0), \"Address zero cannot be a member\");\n+    /// DeleteExpressionMutation(`require(child != address(0), \"Address zero cannot be a member\")` |==> `assert(true)`) of: `require(child != address(0), \"Address zero cannot be a member\");`\n+    assert(true);\n \n     Member storage memberData = members[msg.sender];\n     require(memberData.balance >= joiningFee, \"Insufficient funds\");\n", "link": "https://prover.certora.com/output/98279/25e191f1c2154701a1937885904b1020?anonymousKey=cf9f211c7bb06b5d6fef8015e4f682db0317e0ae", "name": "gambit_out/mutants/59/Pyramid.sol", "id": "59", "rules": [{"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "FAIL"}, {"name": "onlyLegalChildUpdates", "status": "FAIL"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "FAIL"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "RequireMutation", "diff": "--- original\n+++ mutant\n@@ -168,7 +168,8 @@\n   function join(address child, bool isRight) memebersOnly() public {\n     require(!hasChild(msg.sender, isRight), \"Child already exists\");\n     require(!contains(child), \"Child already a member\");\n-    require(child != address(0), \"Address zero cannot be a member\");\n+    /// RequireMutation(`child != address(0)` |==> `true`) of: `require(child != address(0), \"Address zero cannot be a member\");`\n+    require(true, \"Address zero cannot be a member\");\n \n     Member storage memberData = members[msg.sender];\n     require(memberData.balance >= joiningFee, \"Insufficient funds\");\n", "link": "https://prover.certora.com/output/98279/5bb628b1daf045b7b6a87fc7eb037b93?anonymousKey=7ffc4b5dd138387ce4bf05f5ad35f5e7d755888c", "name": "gambit_out/mutants/60/Pyramid.sol", "id": "60", "rules": [{"name": "isChildOfIntegrity", "status": "FAIL"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "FAIL"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "FAIL"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "RequireMutation", "diff": "--- original\n+++ mutant\n@@ -168,7 +168,8 @@\n   function join(address child, bool isRight) memebersOnly() public {\n     require(!hasChild(msg.sender, isRight), \"Child already exists\");\n     require(!contains(child), \"Child already a member\");\n-    require(child != address(0), \"Address zero cannot be a member\");\n+    /// RequireMutation(`child != address(0)` |==> `false`) of: `require(child != address(0), \"Address zero cannot be a member\");`\n+    require(false, \"Address zero cannot be a member\");\n \n     Member storage memberData = members[msg.sender];\n     require(memberData.balance >= joiningFee, \"Insufficient funds\");\n", "link": "https://prover.certora.com/output/98279/1e124c82b6a74e63909e23d418e32642?anonymousKey=8a2fad5b83d191c9a373a121e245b5a1b2959ebc", "name": "gambit_out/mutants/61/Pyramid.sol", "id": "61", "rules": [{"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}], "SANITY_FAIL": ["zeroIsNotAMember", "onlyLegalChildUpdates", "isChildOfIntegrity", "parentFracIsPositive", "rootMirrorIsRoot", "rootReachesAll", "chiledOfParent", "membershipGhost", "rootIsAMember", "onlyLegalRootChanges", "rootHasNoParent", "allChildrenHaveParents", "childIsNotParent", "onlyLegalParentUpdates"], "UNKNOWN": [], "TIMEOUT": []}, {"description": "DeleteExpressionMutation", "diff": "--- original\n+++ mutant\n@@ -171,7 +171,8 @@\n     require(child != address(0), \"Address zero cannot be a member\");\n \n     Member storage memberData = members[msg.sender];\n-    require(memberData.balance >= joiningFee, \"Insufficient funds\");\n+    /// DeleteExpressionMutation(`require(memberData.balance >= joiningFee, \"Insufficient funds\")` |==> `assert(true)`) of: `require(memberData.balance >= joiningFee, \"Insufficient funds\");`\n+    assert(true);\n     memberData.balance -= joiningFee;\n \n     members[child].exists = true; // Make child a member\n", "link": "https://prover.certora.com/output/98279/aa0b732e540a4538b631571d7576b367?anonymousKey=ef7dc6e47944d9c129809c58416117dbc5618b29", "name": "gambit_out/mutants/62/Pyramid.sol", "id": "62", "rules": [{"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "RequireMutation", "diff": "--- original\n+++ mutant\n@@ -171,7 +171,8 @@\n     require(child != address(0), \"Address zero cannot be a member\");\n \n     Member storage memberData = members[msg.sender];\n-    require(memberData.balance >= joiningFee, \"Insufficient funds\");\n+    /// RequireMutation(`memberData.balance >= joiningFee` |==> `true`) of: `require(memberData.balance >= joiningFee, \"Insufficient funds\");`\n+    require(true, \"Insufficient funds\");\n     memberData.balance -= joiningFee;\n \n     members[child].exists = true; // Make child a member\n", "link": "https://prover.certora.com/output/98279/3b26be52c1254b258b409bd77dc695ef?anonymousKey=44b1b9ac518901161f78954d6cb481b804de350d", "name": "gambit_out/mutants/63/Pyramid.sol", "id": "63", "rules": [{"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "RequireMutation", "diff": "--- original\n+++ mutant\n@@ -171,7 +171,8 @@\n     require(child != address(0), \"Address zero cannot be a member\");\n \n     Member storage memberData = members[msg.sender];\n-    require(memberData.balance >= joiningFee, \"Insufficient funds\");\n+    /// RequireMutation(`memberData.balance >= joiningFee` |==> `false`) of: `require(memberData.balance >= joiningFee, \"Insufficient funds\");`\n+    require(false, \"Insufficient funds\");\n     memberData.balance -= joiningFee;\n \n     members[child].exists = true; // Make child a member\n", "link": "https://prover.certora.com/output/98279/68994af0276643009dc795fedd200fa7?anonymousKey=49a4c6eedac78c3ab3299020c5483db64dca166c", "name": "gambit_out/mutants/64/Pyramid.sol", "id": "64", "rules": [{"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}], "SANITY_FAIL": ["rootHasNoParent", "zeroIsNotAMember", "isChildOfIntegrity", "rootReachesAll", "onlyLegalRootChanges", "onlyLegalChildUpdates", "rootIsAMember", "chiledOfParent", "membershipGhost", "rootMirrorIsRoot", "onlyLegalParentUpdates", "childIsNotParent", "allChildrenHaveParents", "parentFracIsPositive"], "UNKNOWN": [], "TIMEOUT": []}, {"description": "SwapArgumentsOperatorMutation", "diff": "--- original\n+++ mutant\n@@ -171,7 +171,8 @@\n     require(child != address(0), \"Address zero cannot be a member\");\n \n     Member storage memberData = members[msg.sender];\n-    require(memberData.balance >= joiningFee, \"Insufficient funds\");\n+    /// SwapArgumentsOperatorMutation(`memberData.balance >= joiningFee` |==> `joiningFee >= memberData.balance`) of: `require(memberData.balance >= joiningFee, \"Insufficient funds\");`\n+    require(joiningFee >= memberData.balance, \"Insufficient funds\");\n     memberData.balance -= joiningFee;\n \n     members[child].exists = true; // Make child a member\n", "link": "https://prover.certora.com/output/98279/667f3b8671d0429093128b1fa24b3afa?anonymousKey=8d9aa71c0ef61f019335aa765a6de4a1d78c5853", "name": "gambit_out/mutants/65/Pyramid.sol", "id": "65", "rules": [{"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "DeleteExpressionMutation", "diff": "--- original\n+++ mutant\n@@ -172,7 +172,8 @@\n \n     Member storage memberData = members[msg.sender];\n     require(memberData.balance >= joiningFee, \"Insufficient funds\");\n-    memberData.balance -= joiningFee;\n+    /// DeleteExpressionMutation(`memberData.balance -= joiningFee` |==> `assert(true)`) of: `memberData.balance -= joiningFee;`\n+    assert(true);\n \n     members[child].exists = true; // Make child a member\n \n", "link": "https://prover.certora.com/output/98279/5324c6c7311c4276b4c4e7a866888ff1?anonymousKey=962bbfebd1fe21aa839cef0a40dcd9902e5c2d34", "name": "gambit_out/mutants/66/Pyramid.sol", "id": "66", "rules": [{"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "AssignmentMutation", "diff": "--- original\n+++ mutant\n@@ -172,7 +172,8 @@\n \n     Member storage memberData = members[msg.sender];\n     require(memberData.balance >= joiningFee, \"Insufficient funds\");\n-    memberData.balance -= joiningFee;\n+    /// AssignmentMutation(`joiningFee` |==> `0`) of: `memberData.balance -= joiningFee;`\n+    memberData.balance -= 0;\n \n     members[child].exists = true; // Make child a member\n \n", "link": "https://prover.certora.com/output/98279/58c699facd2c4d34bf589eb80dbf4748?anonymousKey=9083834b3f48cc1f427993f8c15a2f4032d2baa3", "name": "gambit_out/mutants/67/Pyramid.sol", "id": "67", "rules": [{"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "AssignmentMutation", "diff": "--- original\n+++ mutant\n@@ -172,7 +172,8 @@\n \n     Member storage memberData = members[msg.sender];\n     require(memberData.balance >= joiningFee, \"Insufficient funds\");\n-    memberData.balance -= joiningFee;\n+    /// AssignmentMutation(`joiningFee` |==> `1`) of: `memberData.balance -= joiningFee;`\n+    memberData.balance -= 1;\n \n     members[child].exists = true; // Make child a member\n \n", "link": "https://prover.certora.com/output/98279/431dee0e9cb24e54ac1a23593f952eed?anonymousKey=4567555136c547dae6b2545ccee97875124c716a", "name": "gambit_out/mutants/68/Pyramid.sol", "id": "68", "rules": [{"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "DeleteExpressionMutation", "diff": "--- original\n+++ mutant\n@@ -174,7 +174,8 @@\n     require(memberData.balance >= joiningFee, \"Insufficient funds\");\n     memberData.balance -= joiningFee;\n \n-    members[child].exists = true; // Make child a member\n+    /// DeleteExpressionMutation(`members[child].exists = true` |==> `assert(true)`) of: `members[child].exists = true; // Make child a member`\n+    assert(true); // Make child a member\n \n     // Add child\n     if (isRight) {\n", "link": "https://prover.certora.com/output/98279/ab7ce25891ff413e817b9af0d6d4f18c?anonymousKey=ab1b7f11faf4ba800fb160eb323767f0dd487cd2", "name": "gambit_out/mutants/69/Pyramid.sol", "id": "69", "rules": [{"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "FAIL"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "AssignmentMutation", "diff": "--- original\n+++ mutant\n@@ -174,7 +174,8 @@\n     require(memberData.balance >= joiningFee, \"Insufficient funds\");\n     memberData.balance -= joiningFee;\n \n-    members[child].exists = true; // Make child a member\n+    /// AssignmentMutation(`true` |==> `false`) of: `members[child].exists = true; // Make child a member`\n+    members[child].exists = false; // Make child a member\n \n     // Add child\n     if (isRight) {\n", "link": "https://prover.certora.com/output/98279/04a34c507d86453886d64be50d7f5072?anonymousKey=78d47c2f9617eeea68a1a112a7b160bc7d8d805d", "name": "gambit_out/mutants/70/Pyramid.sol", "id": "70", "rules": [{"name": "membershipGhost", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "FAIL"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "IfStatementMutation", "diff": "--- original\n+++ mutant\n@@ -177,7 +177,8 @@\n     members[child].exists = true; // Make child a member\n \n     // Add child\n-    if (isRight) {\n+    /// IfStatementMutation(`isRight` |==> `true`) of: `if (isRight) {`\n+    if (true) {\n       memberData.rightChild = child;\n     } else {\n       memberData.leftChild = child;\n", "link": "https://prover.certora.com/output/98279/15ef31e34d3040cdb619dd162be34d5b?anonymousKey=ad4ccbe673812c8353e0a0f501a3079a326ab7d2", "name": "gambit_out/mutants/71/Pyramid.sol", "id": "71", "rules": [{"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "FAIL"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "FAIL"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "FAIL"}, {"name": "rootReachesAll", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "IfStatementMutation", "diff": "--- original\n+++ mutant\n@@ -177,7 +177,8 @@\n     members[child].exists = true; // Make child a member\n \n     // Add child\n-    if (isRight) {\n+    /// IfStatementMutation(`isRight` |==> `false`) of: `if (isRight) {`\n+    if (false) {\n       memberData.rightChild = child;\n     } else {\n       memberData.leftChild = child;\n", "link": "https://prover.certora.com/output/98279/ba94546f2c6d4dbfb922596a87bf7f11?anonymousKey=cf45dc7a06e6697bfe4d9a1afd5890033a8312bd", "name": "gambit_out/mutants/72/Pyramid.sol", "id": "72", "rules": [{"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "FAIL"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "FAIL"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "FAIL"}, {"name": "rootReachesAll", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "DeleteExpressionMutation", "diff": "--- original\n+++ mutant\n@@ -180,7 +180,8 @@\n     if (isRight) {\n       memberData.rightChild = child;\n     } else {\n-      memberData.leftChild = child;\n+      /// DeleteExpressionMutation(`memberData.leftChild = child` |==> `assert(true)`) of: `memberData.leftChild = child;`\n+      assert(true);\n     }\n   }\n }\n", "link": "https://prover.certora.com/output/98279/2116abf68455406aad5f380a844dc856?anonymousKey=fe12bae890d0b7e7819cfe3e08103758729437d2", "name": "gambit_out/mutants/73/Pyramid.sol", "id": "73", "rules": [{"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "rootReachesAll", "status": "FAIL"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}, {"description": "DeleteExpressionMutation", "diff": "--- original\n+++ mutant\n@@ -178,7 +178,8 @@\n \n     // Add child\n     if (isRight) {\n-      memberData.rightChild = child;\n+      /// DeleteExpressionMutation(`memberData.rightChild = child` |==> `assert(true)`) of: `memberData.rightChild = child;`\n+      assert(true);\n     } else {\n       memberData.leftChild = child;\n     }\n", "link": "https://prover.certora.com/output/98279/c1d21433be5347b5a472143a6d09c60a?anonymousKey=bf710fb02b082a01fb9fc911923ac47d4cc8f8cd", "name": "gambit_out/mutants/74/Pyramid.sol", "id": "74", "rules": [{"name": "rootReachesAll", "status": "FAIL"}, {"name": "parentFracIsPositive", "status": "SUCCESS"}, {"name": "childIsNotParent", "status": "SUCCESS"}, {"name": "membershipGhost", "status": "SUCCESS"}, {"name": "zeroIsNotAMember", "status": "SUCCESS"}, {"name": "chiledOfParent", "status": "SUCCESS"}, {"name": "rootMirrorIsRoot", "status": "SUCCESS"}, {"name": "allChildrenHaveParents", "status": "SUCCESS"}, {"name": "rootHasNoParent", "status": "SUCCESS"}, {"name": "isChildOfIntegrity", "status": "SUCCESS"}, {"name": "onlyLegalChildUpdates", "status": "SUCCESS"}, {"name": "envfreeFuncsStaticCheck", "status": "SUCCESS"}, {"name": "rootIsAMember", "status": "SUCCESS"}, {"name": "onlyLegalParentUpdates", "status": "SUCCESS"}, {"name": "onlyLegalRootChanges", "status": "SUCCESS"}], "SANITY_FAIL": [], "UNKNOWN": [], "TIMEOUT": []}]